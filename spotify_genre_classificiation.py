# -*- coding: utf-8 -*-
"""Spotify genre classificiation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bXrxqSY3zuAaW9aD_wkhE15xgL9jErV0

# Spotify genre classification system, which classifies the genre of the song from it's other attributes like popularity, acousticness, danceability, etc.
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Loading the data from kaggle dataset on Spotify Tracks database containing 232726 records and 18 columns of attributes."""

import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/parnabd/Spotify-genre-classification/master/data/SpotifyFeatures.csv?token=AM5XLYC4S7SJWEI3NNSQH2K6ROMPW')
unused_col = ['artist_name', 'track_name', 'track_id']
data = df.drop(columns=unused_col).reset_index(drop=True)
data

data.isna().sum()

"""We are validating the pre-reqisites for KMeans clustering, among which missing value needs to be handled before the data is feeded for clustering methods. Generally, either imputation (filling in the missing values) or marginalisation (ignoring the missing data) is followed to handle the missing values for enhancing the claasification mechanism, but in this dataset we are not having any missing values, so we continue without conducting any manipulation on the data."""

df.describe()

mode_dict = {'Major' : 1, 'Minor' : 0}
key_dict = {'C' : 1, 'C#' : 2, 'D' : 3, 'D#' : 4, 'E' : 5, 'F' : 6, 
        'F#' : 7, 'G' : 9, 'G#' : 10, 'A' : 11, 'A#' : 12, 'B' : 12}

data['time_signature'] = df['time_signature'].apply(lambda x : int(x[0]))
data['mode'].replace(mode_dict, inplace=True)
data['key'] = df['key'].replace(key_dict).astype(int)
data

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'popularity', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'acousticness', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'danceability', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'duration_ms', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'energy', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'instrumentalness', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'liveness', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'loudness', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'speechiness', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'tempo', bins=20)

g = sns.FacetGrid(data, col='genre')
g.map(plt.hist, 'valence', bins=20)



"""## Clustering the song features popularity, acousticness, danceability,	duration_ms,	energy,	instrumentalness,	key	liveness,	loudness,	mode,	speechiness,	tempo,	time_signature,	valence to have a better understanding about the commonality/grouping of the data points based on the aforesaid features."""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

X = np.array(data.drop(['genre'], 1).astype(float))
kmeans = KMeans(n_clusters=27)
kmeans.fit(X)

